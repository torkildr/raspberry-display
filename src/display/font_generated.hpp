#ifndef FONT_GENERATED_HPP
#define FONT_GENERATED_HPP

#include <unordered_map>
#include <vector>
#include <cstdint>

namespace font {

using GlyphData = std::vector<uint8_t>;

const std::unordered_map<char, GlyphData> fontMap = {
    {' ', {0x00}}, // space
    {'!', {0x5f}}, // !
    {'"', {0x07, 0x00, 0x07}}, // "
    {'#', {0x14, 0x3e, 0x14, 0x3e, 0x14}}, // #
    {'$', {0x24, 0x2a, 0x7f, 0x2a, 0x12}}, // $
    {'%', {0x42, 0x25, 0x12, 0x08, 0x24, 0x52, 0x21}}, // %
    {'&', {0x30, 0x4a, 0x45, 0x4d, 0x52, 0x20, 0x50}}, // &
    {'\'', {0x07}}, // single quote
    {'(', {0x3e, 0x41}}, // (
    {')', {0x41, 0x3e}}, // )
    {'*', {0x05, 0x02, 0x05}}, // *
    {'+', {0x08, 0x08, 0x3e, 0x08, 0x08}}, // +
    {',', {0x80, 0x60}}, // ,
    {'-', {0x08, 0x08, 0x08, 0x08}}, // -
    {'.', {0x60}}, // .
    {'/', {0x60, 0x1c, 0x03}}, // /
    {'0', {0x3e, 0x41, 0x41, 0x3e}}, // 0
    {'1', {0x42, 0x7f, 0x40}}, // 1
    {'2', {0x62, 0x51, 0x49, 0x46}}, // 2
    {'3', {0x22, 0x41, 0x49, 0x36}}, // 3
    {'4', {0x0c, 0x0a, 0x7f, 0x08}}, // 4
    {'5', {0x2f, 0x49, 0x49, 0x31}}, // 5
    {'6', {0x3e, 0x49, 0x49, 0x30}}, // 6
    {'7', {0x01, 0x61, 0x19, 0x07}}, // 7
    {'8', {0x36, 0x49, 0x49, 0x36}}, // 8
    {'9', {0x06, 0x49, 0x49, 0x3e}}, // 9
    {':', {0x66}}, // :
    {';', {0x80, 0x66}}, // ;
    {'<', {0x08, 0x14, 0x22}}, // <
    {'=', {0x14, 0x14, 0x14}}, // =
    {'>', {0x22, 0x14, 0x08}}, // >
    {'?', {0x02, 0x01, 0x51, 0x09, 0x06}}, // ?
    {'@', {0x3c, 0x42, 0x99, 0xab, 0xbd, 0xa2, 0x1c}}, // @
    {'A', {0x7e, 0x09, 0x09, 0x7e}}, // A
    {'B', {0x7f, 0x49, 0x49, 0x36}}, // B
    {'C', {0x3e, 0x41, 0x41, 0x22}}, // C
    {'D', {0x7f, 0x41, 0x41, 0x3e}}, // D
    {'E', {0x7f, 0x49, 0x49, 0x41}}, // E
    {'F', {0x7f, 0x09, 0x09, 0x01}}, // F
    {'G', {0x3e, 0x41, 0x49, 0x3a}}, // G
    {'H', {0x7f, 0x08, 0x08, 0x7f}}, // H
    {'I', {0x41, 0x7f, 0x41}}, // I
    {'J', {0x20, 0x40, 0x40, 0x3f}}, // J
    {'K', {0x7f, 0x08, 0x14, 0x63}}, // K
    {'L', {0x7f, 0x40, 0x40, 0x40}}, // L
    {'M', {0x7f, 0x02, 0x04, 0x02, 0x7f}}, // M
    {'N', {0x7f, 0x02, 0x04, 0x08, 0x7f}}, // N
    {'O', {0x3e, 0x41, 0x41, 0x41, 0x3e}}, // O
    {'P', {0x7f, 0x09, 0x09, 0x06}}, // P
    {'Q', {0x3e, 0x41, 0x51, 0x61, 0x7e, 0x80}}, // Q
    {'R', {0x7f, 0x09, 0x19, 0x29, 0x46}}, // R
    {'S', {0x26, 0x49, 0x49, 0x32}}, // S
    {'T', {0x01, 0x01, 0x7f, 0x01, 0x01}}, // T
    {'U', {0x3f, 0x40, 0x40, 0x40, 0x3f}}, // U
    {'V', {0x1f, 0x20, 0x40, 0x20, 0x1f}}, // V
    {'W', {0x1f, 0x60, 0x18, 0x60, 0x1f}}, // W
    {'X', {0x63, 0x14, 0x08, 0x14, 0x63}}, // X
    {'Y', {0x03, 0x04, 0x78, 0x04, 0x03}}, // Y
    {'Z', {0x61, 0x51, 0x49, 0x45, 0x43}}, // Z
    {'[', {0x7f, 0x41}}, // [
    {'\\', {0x03, 0x1c, 0x60}}, // backslash
    {']', {0x41, 0x7f}}, // ]
    {'^', {0x04, 0x02, 0x01, 0x02, 0x04}}, // ^
    {'_', {0x80, 0x80, 0x80, 0x80}}, // _
    {'`', {0x01, 0x02}}, // `
    {'a', {0x20, 0x54, 0x54, 0x78}}, // a
    {'b', {0x7f, 0x44, 0x44, 0x38}}, // b
    {'c', {0x38, 0x44, 0x44, 0x44}}, // c
    {'d', {0x38, 0x44, 0x44, 0x7f}}, // d
    {'e', {0x38, 0x54, 0x54, 0x18}}, // e
    {'f', {0x08, 0x7e, 0x09}}, // f
    {'g', {0x58, 0xa4, 0xa4, 0x7c}}, // g
    {'h', {0x7f, 0x04, 0x04, 0x78}}, // h
    {'i', {0x7d}}, // i
    {'j', {0x80, 0x7d}}, // j
    {'k', {0x7f, 0x10, 0x28, 0x44}}, // k
    {'l', {0x7f}}, // l
    {'m', {0x7c, 0x04, 0x78, 0x04, 0x78}}, // m
    {'n', {0x7c, 0x04, 0x04, 0x78}}, // n
    {'o', {0x38, 0x44, 0x44, 0x38}}, // o
    {'p', {0xfc, 0x24, 0x24, 0x18}}, // p
    {'q', {0x18, 0x24, 0x24, 0xfc}}, // q
    {'r', {0x7c, 0x04, 0x04, 0x08}}, // r
    {'s', {0x48, 0x54, 0x54, 0x24}}, // s
    {'t', {0x04, 0x3f, 0x44}}, // t
    {'u', {0x3c, 0x40, 0x40, 0x7c}}, // u
    {'v', {0x1c, 0x20, 0x40, 0x20, 0x1c}}, // v
    {'w', {0x3c, 0x40, 0x3c, 0x40, 0x3c}}, // w
    {'x', {0x44, 0x28, 0x10, 0x28, 0x44}}, // x
    {'y', {0x5c, 0xa0, 0xa0, 0x7c}}, // y
    {'z', {0x64, 0x54, 0x4c}}, // z
    {'{', {0x18, 0x66, 0x81, 0x81}}, // {
    {'|', {0xff}}, // |
    {'}', {0x81, 0x81, 0x66, 0x18}}, // }
    {'~', {0x08, 0x04, 0x04, 0x08, 0x08, 0x04}}, // ~
    {'\xe6', {0x20, 0x54, 0x54, 0x38, 0x54, 0x54, 0x58}}, // 0xe6
    {'\xf8', {0x40, 0x38, 0x64, 0x54, 0x38, 0x04}}, // 0xf8
    {'\xe5', {0x20, 0x54, 0x55, 0x78}}, // 0xe5
    {'\xc6', {0x7e, 0x09, 0x09, 0x7f, 0x49, 0x41}}, // 0xc6
    {'\xd8', {0x40, 0x3e, 0x51, 0x49, 0x45, 0x3e, 0x01}}, // 0xd8
    {'\xc5', {0x78, 0x17, 0x15, 0x17, 0x78}}, // 0xc5
    {'\xb0', {0x02, 0x05, 0x02}}, // 0xb0
    {'\xba', {0x02, 0x05, 0x02}} // 0xba -> 0xb0
};

inline const GlyphData* getGlyph(char c) {
    auto it = fontMap.find(c);
    if (it != fontMap.end()) {
        return &it->second;
    }
    // Fallback to space character
    auto fallback = fontMap.find(' ');
    return (fallback != fontMap.end()) ? &fallback->second : nullptr;
}

} // namespace font

#endif // FONT_GENERATED_HPP
